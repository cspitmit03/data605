IM <- IM[order(IM[,4],decreasing=TRUE),]
IM
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Revenue per Employee by Industry in NY", x="Industry", y="In 000's")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = paste(round(mean(IM$RevPerEmp),0),"NY Average")), hjust=-0.1, vjust = -1, color = "blue")
library(ggplot2)
library(gridExtra)
state[order(-state$freq),][3,]
#NY is third
complete.cases(inc[1:8,])
#all cases are complete
NY <- inc[ which(inc$State=="NY"), ]
NYc <- NY[c("Industry","Employees","Revenue")]
IM <- aggregate(NYc[c("Employees","Revenue")], by=list(NY$Industry),
FUN=sum, na.rm=TRUE)
colnames(IM) <- c("Industry","EmployeeSum","RevenueSum")
IM$RevPerEmp <- with(IM,IM$RevenueSum/IM$EmployeeSum/1000)
IM <- IM[order(IM[,4],decreasing=TRUE),]
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Revenue per Employee by Industry in NY", x="Industry", y="In 000's")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = paste(round(mean(IM$RevPerEmp),0),"NY Average")), hjust=-0.1, vjust = -1, color = "blue")
incc <- inc[c("Industry","Employees","Revenue")]
IM <- aggregate(incc[c("Employees","Revenue")], by=list(incc$Industry),
FUN=sum, na.rm=TRUE)
IM
colnames(IM) <- c("Industry","EmployeeSum","RevenueSum")
IM$RevPerEmp <- with(IM,IM$RevenueSum/IM$EmployeeSum/1000)
IM
IM <- IM[order(IM[,4],decreasing=TRUE),]
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Revenue per Employee by Industry in NY", x="Industry", y="In 000's")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = paste(round(mean(IM$RevPerEmp),0),"NY Average")), hjust=-0.1, vjust = -1, color = "blue")
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Revenue per Employee by Industry in NY", x="Industry", y="In 000's")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = paste(round(mean(IM$RevPerEmp),0),"Nationwide Average")), hjust=-0.1, vjust = -1, color = "blue")
library(ggplot2)
library(gridExtra)
incc <- inc[c("Industry","Employees","Revenue")]
IM <- aggregate(incc[c("Employees","Revenue")], by=list(incc$Industry),
FUN=sum, na.rm=TRUE)
colnames(IM) <- c("Industry","EmployeeSum","RevenueSum")
IM$RevPerEmp <- with(IM,IM$RevenueSum/IM$EmployeeSum/1000)
IM <- IM[order(IM[,4],decreasing=TRUE),]
e <- ggplot(IM,aes(IM$Industry, IM$RevPerEmp))+geom_bar(stat="identity")+theme_classic()+labs(title="Revenue per Employee by Industry in NY", x="Industry", y="In 000's")
e+coord_flip()+geom_hline(yintercept=mean(IM$RevPerEmp), linetype="dashed",
color = "black", size=0.5)+ geom_text(aes(0,mean(IM$RevPerEmp),label = paste(round(mean(IM$RevPerEmp),0),"Nationwide Average")), hjust=-0.1, vjust = -1, color = "blue")
A <- matrix(c(1,2,3,4,-1,0,1,3,0,1,-2,1,5,4,-2,-3), nrow = 4)
A
rankMatrix(A)
qr(A)
B <- matrix(c(1,2,1,3,6,3,2,4,2), nrow = 3)
qr(B)
A <- matrix(c(1,2,3,4,-1,0,1,3,0,1,-2,1,5,4,-2,-3), nrow = 4)
qr(A)
B <- matrix(c(1,2,1,3,6,3,2,4,2), nrow = 3)
qr(B)
$$\begin{array}
A <- matrix(c(1,2,3,4,-1,0,1,3,0,1,-2,1,5,4,-2,-3), nrow = 4)
qr(A)
B <- matrix(c(1,2,1,3,6,3,2,4,2), nrow = 3)
qr(B)
A <- matrix(c(1,2,3,0,4,5,0,0,6), nrow = 3)
A
eigen(A)
A <- matrix(c(1,2,3,0,4,5,0,0,6), nrow = 3)
eigen(A)
install.packages("datashader")
install.packages("datashader")
install.packages(c("BH", "knitr", "MASS", "mgcv", "nlme", "rlang", "rpart", "stringr"))
A <- matrix(c(1,2,3,-1,0,4), nrow = 2)
A
EX = eigen(X)
A <- matrix(c(1,2,3,-1,0,4), nrow = 2)
# Then transpose matrix A using t()
AT <- t(A)
AT
# Multiply the transposed matrix A by matrix A
Y<- AT %*% A
Y
# Multiply A by transposed matrix A (AA^T)
X<- A %*% AT
X
# compute eigenvalues and eigenvectors
EX = eigen(X)
EY = eigen(Y)
EX
EY
svd(A)
SA <- svd(A)
cbind(EX$vectors, SA$u)
#As you can see the first two columns are the Evectors of X and the right are the left singular for A
cbind(EX$vectors, SA$u)
#As you can see the first two columns are the Evectors of X and the right are the right singular for A
cbind(EY$vectors, SA$v)
svd$d
SA$d
cbind(sqrt(EX$values), SA$d)
A <- matrix(c(2,3,6,6,3,5,5,8,9),nrow=3)
myinverse <- function(A){
#generate empty I matrix first
I <- diag(1,nrow(A),ncol(A))
#iterate over the rows
for (i in 1:nrow(A)) {
#iterate over the columns
for (j in 1:ncol(A)){
#Calucate the value for each element
Vij <- A[-i,-j]
I[i,j] <- ((-1)^(i+j))*det(Pij)
}
}
#Use the transpose of the created matrix C and the determinant of the input matrix A to get the inverse
return(t(C)/det(A))
}
#Test the Function
A
myinverse(A)
myinverse <- function(A){
#generate empty I matrix first
I <- diag(1,nrow(A),ncol(A))
#iterate over the rows
for (i in 1:nrow(A)) {
#iterate over the columns
for (j in 1:ncol(A)){
#Calucate the value for each element
Vij <- A[-i,-j]
I[i,j] <- ((-1)^(i+j))*det(Vij)
}
}
#Use the transpose of the created matrix C and the determinant of the input matrix A to get the inverse
return(t(C)/det(A))
}
#Test the Function
A
myinverse(A)
myinverse <- function(A){
#generate empty I matrix first
I <- diag(1,nrow(A),ncol(A))
#iterate over the rows
for (i in 1:nrow(A)) {
#iterate over the columns
for (j in 1:ncol(A)){
#Calucate the value for each element
Vij <- A[-i,-j]
I[i,j] <- ((-1)^(i+j))*det(Vij)
}
}
#Use the transpose of the created matrix C and the determinant of the input matrix A to get the inverse
return(t(I)/det(A))
}
inverse(A)
myinverse(A)
myinverse(A)*A
myinverse(A)*%*A
myinverse(A)%*%A
B=myinverse(A)
A%*%B
#althought the values are in scinotation you can see the 1's along the diagonal and zero/near zero in the other cells.
i=1
j=1
A[1,j]
A[-1,-j]
A[-i,-j]
A[-i,-j-1]
A
myinverse <- function(A){
#generate empty I matrix first
I <- diag(1,nrow(A),ncol(A))
#iterate over the rows
for (i in 1:nrow(A)) {
#iterate over the columns
for (j in 1:ncol(A)){
#Calucate the value for each cell in the matrix
Mmini <- A[-i,-j]
#-1 raised to a power provides the appropriate signs as the mini det is calculated for the 2x2s
I[i,j] <- ((-1)^(i+j))*det(Mmini)
}
}
#finish the calculation by dividing by the det of A
return(t(I)/det(A))
}
B=myinverse(A)
A%*%B
shiny::runApp('Documents/GitHub/data608/Project3/Interactive')
shiny::runApp('Documents/GitHub/data608/Project3/Interactive')
MyData <- read.csv(file="~/Documents/GitHub/data608/Project3/Interactive/cleaned-cdc-mortality-1999-2010-2.csv",
header=TRUE, sep=",")
runApp('Documents/GitHub/data608/Project3/Interactive')
library(shiny)
library(ggplot2)
# Define UI for application that plots Question 1 and Question 2
library(shiny)
library(ggplot2)
library(dplyr)
MyData <- read.csv(file="~/Documents/GitHub/data608/Project3/Interactive/cleaned-cdc-mortality-1999-2010-2.csv",
header=TRUE, sep=",")
runApp('Documents/GitHub/data608/Project3/Interactive')
e^-9
exp(-9)
runif(10,1,5)
foo <- rnorm(100, mean=1, sd=2)
hist(foo, prob=TRUE)
curve(dnorm(x, mean=mean(foo), sd=sd(foo)), add=TRUE)
qexp(0.5, 1/1000)
qexp(1/1000, 0.5)
shiny::runApp('Documents/GitHub/data608/Project3/Interactive')
df = pd.read_csv(
'https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module4/Data/riverkeeper_data_2013.csv'
)
import dash
import dash_core_components as dcc
import dash_html_components as html
import plotly.graph_objs as go
import pandas as pd
app = dash.Dash()
df = pd.read_csv(
'https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module4/Data/riverkeeper_data_2013.csv'
)
df['Date'] = pd.to_datetime(df['Date'])
df['EnteroCount'].replace(to_replace = "<1", value = 0, inplace = True)
df['EnteroCount'].replace(to_replace = "<10", value = 5, inplace = True)
df['EnteroCount'].replace(to_replace = ">2420", value = 2430, inplace = True)
df['EnteroCount'].replace(to_replace = ">24196", value = 24200, inplace = True)
df['EnteroCount'] = pd.to_numeric(df['EnteroCount'])
import dash
import pandas as pdf
import pandas as pd
exp(-11)*(11^0)/(0!)
exp(-11)*(11^0)/(fact(0))
exp(-11)*(11^0)/(factorial(0))
exp(-11)*(11^1)/(factorial(1))
exp(-11)*(11^9)/(factorial(9))
exp(-11)*(11^8)/(factorial(8))
exp(-11)*(11^7)/(factorial(7))
exp(-11)*(11^6)/(factorial(6))
exp(-11)*(11^5)/(factorial(5))
exp(-11)*(11^4)/(factorial(4))
exp(-11)*(11^3)/(factorial(3))
exp(-11)*(11^2)/(factorial(2))
1.67017e-05+0.0001837187+0.1085255+0.0887936+0.06457716+0.04109456+ 0.02241521+0.01018873+0.003704994+0.001010453
factorial(10)*factorial(7)
install.packages("tweenr")
library(tweenr)
gapminder_edit <- gapminder %>%
arrange(country, year) %>%
select(gdpPercap,lifeExp,year,country, continent, pop) %>%
rename(x=gdpPercap,y=lifeExp,time=year,id=country) %>%
mutate(ease="linear")
library(dplyr)
library(tweenr)
gapminder_edit <- gapminder %>%
arrange(country, year) %>%
select(gdpPercap,lifeExp,year,country, continent, pop) %>%
rename(x=gdpPercap,y=lifeExp,time=year,id=country) %>%
mutate(ease="linear")
install.packages("gapminder")
library(tweenr)
gapminder_edit <- gapminder %>%
arrange(country, year) %>%
select(gdpPercap,lifeExp,year,country, continent, pop) %>%
rename(x=gdpPercap,y=lifeExp,time=year,id=country) %>%
mutate(ease="linear")
library(gapminder)
library(tweenr)
gapminder_edit <- gapminder %>%
arrange(country, year) %>%
select(gdpPercap,lifeExp,year,country, continent, pop) %>%
rename(x=gdpPercap,y=lifeExp,time=year,id=country) %>%
mutate(ease="linear")
head(gapminder_unfiltered)
head(gapminder_edit)
gapminder_tween <- tween_elements(gapminder_edit,
"time", "id", "ease", nframes = 300) %>%
mutate(year = round(time), country = .group) %>%
left_join(gapminder, by=c("country","year","continent")) %>%
rename(population = pop.x)
p2 <- ggplot(gapminder_tween,
aes(x=x, y=y, frame = .frame)) +
geom_point(aes(size=population, color=continent),alpha=0.8) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") +
scale_x_log10(labels=comma)
gganimate(p2, filename="gapminder-tween.gif", title_frame = FALSE, interval = 0.05)
libary(ggplot2)
library(ggplot2)
library(gganimate)
devtools::install_github("dgrtwo/gganimate")
install.packages("devtools")
devtools::install_github("dgrtwo/gganimate")
gapminder_tween <- tween_elements(gapminder_edit,
"time", "id", "ease", nframes = 300) %>%
mutate(year = round(time), country = .group) %>%
left_join(gapminder, by=c("country","year","continent")) %>%
rename(population = pop.x)
p2 <- ggplot(gapminder_tween,
aes(x=x, y=y, frame = .frame)) +
geom_point(aes(size=population, color=continent),alpha=0.8) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") +
scale_x_log10(labels=comma)
gganimate(p2, filename="gapminder-tween.gif", title_frame = FALSE, interval = 0.05)
library(gganimate)
gapminder_tween <- tween_elements(gapminder_edit,
"time", "id", "ease", nframes = 300) %>%
mutate(year = round(time), country = .group) %>%
left_join(gapminder, by=c("country","year","continent")) %>%
rename(population = pop.x)
p2 <- ggplot(gapminder_tween,
aes(x=x, y=y, frame = .frame)) +
geom_point(aes(size=population, color=continent),alpha=0.8) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") +
scale_x_log10(labels=comma)
gganimate(p2, filename="gapminder-tween.gif", title_frame = FALSE, interval = 0.05)
ggplot(gapminder_tween,
aes(x=x, y=y, frame = .frame)) +
geom_point(aes(size=population, color=continent),alpha=0.8) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") +
scale_x_log10(labels=comma)
head(gapminder_tween)
ggplot(gapminder_tween,
aes(x=x, y=y, frame = .frame)) +
geom_point(aes(size=population, color=continent),alpha=0.8) +
xlab("GDP per capita") +
ylab("Life expectancy at birth")
p2<-ggplot(gapminder_tween,
aes(x=x, y=y, frame = .frame)) +
geom_point(aes(size=population, color=continent),alpha=0.8) +
xlab("GDP per capita") +
ylab("Life expectancy at birth")
gganimate(p2, filename="gapminder-tween.gif", title_frame = FALSE, interval = 0.05)
install.packages("magick")
gganimate(p2, filename="gapminder-tween.gif", title_frame = FALSE, interval = 0.05)
gganimate(p2, filename="gapminder-tween.gif", title_frame = FALSE, interval = 0.05)
1/(4*100/3)
1/(4/100/3)
1/(4**3/100)
1/(4*3/100)
1/(5*3/100)
1/(25*3/100)
1/(81*3/100)
1/(400*3/100)
install.packages("networkD3")
# Library
library(networkD3)
library(tidyverse)
install.packages("tidyverse")
# Library
library(networkD3)
library(tidyverse)
# Usually what you have is a connection data frame: a list of flows with intensity for each flow
links=data.frame(source=c("group_A","group_A", "group_B", "group_C", "group_C", "group_E"), target=c("group_C","group_D", "group_E", "group_F", "group_G", "group_H"), value=c(2,3, 2, 3, 1, 3))
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes=data.frame(name=c(as.character(links$source), as.character(links$target)) %>% unique())
links
nodes
links$IDsource=match(links$source, nodes$name)-1
links$IDtarget=match(links$target, nodes$name)-1
links
sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
devtools::install_github("r-dbi/odbc")
library(tidyverse)
library(gganimate)
sigmoid <- function(x_from, x_to, y_from, y_to, scale = 5, n = 100) {
x <- seq(-scale, scale, length = n)
y <- exp(x) / (exp(x) + 1)
tibble(x = (x + scale) / (scale * 2) * (x_to - x_from) + x_from,
y = y * (y_to - y_from) + y_from)
}
n_points <- 400
data <- tibble(from = rep(4, n_points),
to = sample(1:4, n_points, TRUE),
color = sample(c("A", "B"), n_points, TRUE))
sigmoid(0, 1, as.numeric(data[2, 1]), as.numeric(data[2, 2]),
n = 100, scale = 10) %>%
ggplot(aes(x, y)) +
geom_point()
p <- sigmoid(0, 1, as.numeric(data[2, 1]), as.numeric(data[2, 2]),
n = 100, scale = 10) %>%
mutate(time = row_number()) %>%
ggplot(aes(x, y, frame = time)) +
geom_point()
gganimate(p)
10/ (sqrt(364)*.25^2)
sqrt(365*.25)
library(ggplot2)
library(dplyr)
df = arrange(cars, speed)
ggplot(data=cars_speed_df, aes(df$speed)) +
geom_histogram(aes(fill = ..count..)) +
scale_fill_gradient("Frequency", low = "blue", high = "red") +
labs(title = "Speed Counts") +
labs(x = "Speed") +
labs(y = "Count")
summary(model)
model = lm (df$dist ~ df$speed, data = df)
modelsum = summary(model)
print(modelsum)
model$coefficients[2]
model$coefficients[1]
summary(model)
taylor(sin, 0, 4)
install.packages("taylor")
install.packages("pracma")
taylor(sin, 0, 4)
library(pracma)
taylor(sin, 0, 4)
f <- 1/(1-x)
taylor(f, 0, 6)
f <- function(x) 1/(1-x)
taylor(f, 0, 4)
setwd("~/Documents/GitHub/data605/Final")
ls
ls()
dir()
train = read.csv("train.csv")
head(train)
summary(train)()
summary(train)
library(e1017)
library(e1071)
install.packages("e1071")
install.packages("e1071")
skewnwss(train)
skewness(train)
library(e1071)
skewness(train)
qqplot(train$MoSold)
qqnorm(train$MoSold)
qqline(train$MoSold)
d = train$MoSold
skewness(d)
d = train$BsmtFinSF1
skewness(d)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(train$BsmtFinSF1)
summary(train$BsmtFinSF1)
knitr::opts_chunk$set(echo = TRUE)
qqnorm(train$BsmtFinSF1)
qqline(train$BsmtFinSF1)
d = train$BsmtFinSF1+train$BsmtFinSF2
getmode(d)
summary(d)
qqnorm(d)
qqline(d)
hist(d)
summary$mean(d)
summary(d)[3]
summary(d)[4]
summary(d)[4]>summary(d)[3]>getmode(d)
summary(d)[4]>summary(d)[3]
summary(d)[3]>getmode(d)
qqnorm(d)
qqline(d)
qqnorm(d)
qqline(d)
head(summary(train))
par(mfrow=c(1,2))
hist(d)
qqnorm(d)
qqline(d)
skewness(d)
quantile(d, 0.75)
quantile(train$SalePrice, 0.5)
quantile(train$TotalBsmtSF, 0.75)
train$d = train$BsmtFinSF1+train$BsmtFinSF2
summary(train$d)
filter(train, d>x3 & SalePrice >y2)
x3 <- quantile(train$d, 0.75)
y2 <- quantile(train$SalePrice, 0.5)
filter(train, d>x3 & SalePrice >y2)
train$SalePrice
train$d
filter(train, d>x3 & SalePrice >y2)
filter(train, SalePrice > y2 & d > x3)
filter(train, SalePrice > yQ2 & TotalBsmtSF > xQ3)
y2
x3
filter(train, train$SalePrice > y2 & train$d > x3)
filter(train, train$SalePrice > y2 & train$d > x3) %>% tally()
library(dplyr)
filter(train, train$SalePrice > y2 & train$d > x3) %>% tally()
nrow(train)
count(train)
sum()
filter(train, train$SalePrice > y2 & train$d > x3) %>% sum()
sum(filter(train, train$SalePrice > y2 & train$d > x3))
mapply(sum, filter(train, train$SalePrice > y2 & train$d > x3))
filter(train, train$SalePrice > y2 & train$d > x3) %>% count()
filter(train, train$SalePrice > y2 & train$d > x3) %>% count()/count(train$d)
count(train$d)
train$d%>%count()
train$d %>% count()
train %>% count(d)
train %>% sum(d)
dim(train)
dim(train)[1]
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(dplyr)
filter(train, train$SalePrice > y2 & train$d > x3) %>% count()/dim(train)[1]
filter(train, train$SalePrice > y) %>% count()/dim(train)[1]
filter(train, train$SalePrice > y2 & train$d > x3) %>% count()/dim(train)[1]
filter(train, train$SalePrice > y2) %>% count()/dim(train)[1]
filter(train, train$SalePrice > y2 & train$d > x3) %>% count()/dim(train)[1] * filter(train, train$SalePrice > y2) %>% count()/dim(train)[1]
filter(train, train$SalePrice > y2 & train$d < x3) %>% count()/dim(train)[1] * filter(train, train$SalePrice > y2) %>% count()/dim(train)[1]
